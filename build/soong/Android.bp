// QCOM specific config modules
soong_config_module_type {
    name: "librmnetctl_pre_uplink",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    bool_variables: ["uses_pre_uplink_features_netmgrd"],
    properties: ["cflags"],
}

librmnetctl_pre_uplink {
    name: "librmnetctl_pre_uplink_defaults",
    soong_config_variables: {
        uses_pre_uplink_features_netmgrd: {
            cflags: ["-DNO_UPLINK_FEATURES"],
        },
    },
}

soong_config_module_type {
    name: "qti_camera_device",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    bool_variables: ["uses_qti_camera_device"],
    properties: [
        "cppflags",
        "shared_libs",
    ],
}

qti_camera_device {
    name: "qti_camera_device_defaults",
    soong_config_variables: {
        uses_qti_camera_device: {
            cppflags: ["-DQTI_CAMERA_DEVICE"],
            shared_libs: ["vendor.qti.hardware.camera.device@1.0"],
        },
    },
}

soong_config_module_type {
    name: "extended_compress_format",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    bool_variables: ["supports_extended_compress_format"],
    properties: ["cflags"],
}

extended_compress_format {
    name: "extended_compress_format_defaults",
    soong_config_variables: {
        supports_extended_compress_format: {
            cflags: ["-DENABLE_EXTENDED_COMPRESS_FORMAT"],
        },
    },
}

soong_config_module_type {
    name: "qti_cryptfshw_qsee",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    bool_variables: ["should_wait_for_qsee"],
    properties: ["cflags"],
}

qti_cryptfshw_qsee {
    name: "qti_cryptfshw_qsee_defaults",
    soong_config_variables: {
        should_wait_for_qsee: {
            cflags: ["-DWAIT_FOR_QSEE"],
        },
    },
}

soong_config_module_type {
    name: "surfaceflinger_qcom_extensions",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    value_variables: ["qcom_display_headers_namespace"],
    properties: [
        "cppflags",
        "header_libs",
    ],
}

surfaceflinger_qcom_extensions {
    name: "surfaceflinger_qcom_ext_defaults",
    soong_config_variables: {
        qcom_display_headers_namespace: {
            cppflags: ["-DQCOM_UM_FAMILY"],
            header_libs: ["//%s:display_intf_headers"],
        },
    },
}

soong_config_module_type {
    name: "qti_vibrator_hal",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    bool_variables: ["qti_vibrator_use_effect_stream"],
    value_variables: ["qti_vibrator_effect_lib"],
    properties: [
        "cppflags",
        "shared_libs",
    ],
}

qti_vibrator_hal {
    name: "qti_vibrator_hal_defaults",
    soong_config_variables: {
        qti_vibrator_use_effect_stream: {
            cppflags: ["-DUSE_EFFECT_STREAM"],
        },
        qti_vibrator_effect_lib: {
            shared_libs: ["%s"],
        },
    },
}

soong_config_module_type {
    name: "sdmcore_has_is_display_hw_available",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    bool_variables: ["sdmcore_has_is_display_hw_available_func"],
    properties: ["cflags"],
}

sdmcore_has_is_display_hw_available {
    name: "sdmcore_has_is_display_hw_available_func_defaults",
    soong_config_variables: {
        sdmcore_has_is_display_hw_available_func: {
            cflags: ["-DSDMCORE_HAS_IS_DISPLAY_HW_AVAILABLE_FUNC"],
        },
    },
}

soong_config_module_type {
    name: "gptutils_lib",
    module_type: "cc_defaults",
    config_namespace: "statixQcomVars",
    value_variables: ["target_gptutils_lib"],
    properties: [
        "whole_static_libs",
    ],
}

gptutils_lib {
    name: "libgptutils_defaults",
    soong_config_variables: {
        target_gptutils_lib: {
            whole_static_libs: ["%s"],
        },
    },
}
